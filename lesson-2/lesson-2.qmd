---
title: "Archaeological Spatial Analysis in R"
subtitle: "Lesson 2"
author:
  - name: Michal Michalski
    email: michal.m.michalski@durham.ac.uk
    affiliations: Durham University
format: 
  html:
    code-fold: false
    toc: true
    code-overflow: wrap
editor: visual
execute: 
  warning: false
theme: cosmo
---

## Learning Objectives

-   learn about simple feature package

-   deal with coordinate reference system

-   create vector data

-   manipulate vector data

## Introduction

This lesson introduce basics of working with vector data in R.

## Background Reading

Please read and work through the code in the following chapters:

-   Lovelace R, Nowosad K, Muenchow J, *Geocomputation with R,* Chapter 2.2, 2.4, 3.2, 4.2 and 5.2 - [link](https://r.geocompx.org/)

## Packages

Start with loading R packages that we will use in our class.

```{r}

library(sf) # vector representation
library(dplyr) # data manipulation
library(tmap) # mapping
library(units) # units conversion

```

## Simple Features

`{sf}` package is an R implementation of Open Geo-spatial Consortium (OGC) standard called Simple Features. It is a vector model representing world features as geometry types.

The main geometry types are as follow:

-   POINT

-   LINESTRING

-   POLYGON

-   MULTIPOINT

-   MULTILINESTRING

-   MULTIPOLYGON

-   GEOMETRYCOLLECTION

![Source (https://r.geocompx.org/spatial-class.html#intro-sf)](https://r.geocompx.org/figures/sf-classes.png)

There are three hierarchical classes in sf package:

-   `sfg` - a single geometry

-   `sfc` - a a list - column with geometry for each record

-   `sf` - a table with non-geometry and geometry attributes

![Source (https://r-spatial.github.io/sf/articles/sf1.html) NOTE: update the image](https://r-spatial.github.io/sf/articles/sf_xfig.png)

In addition, sf object can store information on dimension, bounding box and coordinate reference system.

Now, we are going to construct a sf classes from scratch

First, create a data frame with sites ( from lesson - 0).

```{r}

# a collection of same lenth vectors
#site ids
site_id = c("THS_1_0_0", "THS_2_0_0", "THS_3_0_0")

# period of site
period =  c("Iron Age", "Iron Age", "Bronze Age")

# site size in hectars
size_ha = c(18.0, 5.6, 7.2)

# construct df
sites <-  data.frame(site_id, size_ha, period)


```

In next step we will construct and add geometry attributes for our sites.

```{r}

# function st_point() creates a single point from numeric vectors
# we need three points for each site record
p1 = st_point(c(5,2))

p2 = st_point(c(3,3))

p3 = st_point(c(1,6))

# function st_sfc() creates a column
points_sfc = st_sfc(p1,p2,p3)


# function st_sf() will extend the df by adding geometry column
sites_sf = st_sf(sites, geometry = points_sfc)

# plot
# plot(sites_sf$geometry)
# print(sites_sf)
# or using tmap
tm_shape(sites_sf) +
  tm_symbols(col = "salmon") +
  tm_grid()

```

A very common task is to convert a table (e.g. in csv format) that contains columns with X and Y coordinate into a point dataset. It could be achieved using `st_as_sf()` package. We

```{r}

# import the csv
tbs_sites = read.csv("../data/tbs_sites.csv")

# check structure
str(tbs_sites)

# check first entries
head(tbs_sites, n = 1)

# a useful command to check external software used by sf
# sf::sf_extSoftVersion()
```

Before continuing we will learn about Coordinate Reference System (CRS) of our data.

It could be either geographic or projected. We can create a `crs` object it by passing an EPSG code to `st_crs()` function.

EPSG stand for European Petroleum Survey Group responsible for maintaining a database of coordinate systems.

```{r}

# provide the EPSG code using st_crs()
crs_wgs84 = st_crs(4326) # WGS84 has EPSG code 4326

# it is a so colled crs object
class(crs_wgs84)

str(crs_wgs84)

# access the wkt element
cat(crs_wgs84$wkt)

# return user input as a number
crs_wgs84$epsg

# PROJ string - old way - means packages / code was not updated
crs_wgs84$proj4string


```

Now we can create simple feature object.

```{r}

# create a sf object
# specify data frame - tbs_sites
# specify column names with x an y
# specify CRS

tbs_sites_sf = st_as_sf(tbs_sites, coords = c("longitude", "latitude"), crs = 4326)

plot(tbs_sites_sf$geometry)

```

We can transform our data to other projection using `st_transform()` function

```{r}


# transform from geodetic to projected
# provide the EPSG code using st_crs() - https://epsg.io/32637

UTM_Zone_37N = st_crs(32637) # IGRS_UTM_Zone_38N EPSG: 3891

# transform sites from 

tbs_sites_sf = st_transform(tbs_sites_sf, UTM_Zone_37N)

# look at crs

st_crs(tbs_sites_sf)

# look at sf class

tbs_sites_sf

# plot the geometry

# plot(tbs_sites_sf$geom)

# or plot with tmap and add grid to see grid reference values in metres
tm_shape(tbs_sites_sf) +
  tm_symbols() +
  tm_grid()

```

Now we can save our feature as in spatial format

```{r}
# save to geopackage
st_write(tbs_sites_sf, "../data/vect/data.gpkg", layer = "tbs_sites", delete_layer = TRUE)

# have a look at content to see the layer
st_layers("../data/vect/data.gpkg",do_count = TRUE)
```

## Attribute operations

Vector attributes store non-spatial information about feature such as site type, size or height.

Therefore, many operation that we perform on data frames can be also applied to sf features.

It is important to note that in R we have paradigms:

Let's start with data

```{r}

rm(list = ls())

# read sites
sites = st_read("../data/vect/data.gpkg", layer = "sites_point", quiet = TRUE)

# glimpse
head(sites, n = 3)


```

### Selecting columns

```{r}

# r base
sites[,c("id","size_ha","period")]


# tidyverse - select function
select(sites, id, size_ha, period)

# did you notice that geom column ist "sticky"?
# check function st_drop_geometry()

```

::: {.callout-tip appearance="simple"}
When selecting columns from `sf` objects the geometry column is added automatically.

Using function st_geometry() we can remove the geometry and return data.frame.

    st_geometry(df) <- NULL 
:::

### Selecting rows

```{r}
# r base
sites[sites$period == "Late Bronze Age",]

# tidyverse - filter function keeps rows matching given criteria
filter(sites, period == "Late Bronze Age")


```

### Pipe

The pipe operator ( `%>%` from dplyr or `I>` from base R) takes the output from a previous code and pass it as a first argument to next function

```{r}

sites_lba = sites %>% # start with your data
  filter(period == "Late Bronze Age") %>% # select ros from LBA
  select(id, size_ha, period) # select only 3 columns
  

```

::: callout-tip
Here you can reas about dplyr pipe`%>%` vs base pipe `I>` - [The new R pipe \| R-bloggers](https://www.r-bloggers.com/2021/05/the-new-r-pipe/)
:::

### Aggregating attributes

```{r}

# base r - aggregate()
aggregate(size_ha ~ period, FUN = sum, data = sites)

# tidyverse - group_by() summarize()
sites %>% 
  group_by(period) %>% 
  summarise(
    total_area = sum(size_ha)
  )

# is it sticky ? remember st_drop_geometry()?
sites %>% 
  group_by(period) %>% 
  summarise(
    total_area = sum(size_ha),
    n = n()
  ) %>% 
  st_drop_geometry() # drop geometry 

```

::: {.callout-tip appearance="simple"}
We have just applied the *split-combine-apply* paradigm to our data. Please consult this [link](https://carpentries-incubator.github.io/R-archaeology-lesson/03-dplyr.html#Split-apply-combine_data_analysis_and_the_summarize()_function) to read about it in more detail.
:::

## Spatial operation

For next part of the lesson we will create a grid with squares 2500m x 2500m (6.25km\^2).

```{r}

# tessellation is create using st_make_grid funtion
grid_sfc = st_make_grid(sites, cellsize = 2500)

# this makes a sfc_POLYGON so we are going to convert it to sf 
grid_sf = st_sf(grid_sfc)

# change column name
st_geometry(grid_sf) <- "geom"

# add unique id to grid
grid_sf$grid_id = 1:nrow(grid_sf)


```

Plot data

```{r}
# plot
tm_shape(grid_sf) +
  tm_borders() +
  tm_text("grid_id") +
tm_shape(sites) +
  tm_symbols(col="blue")
```

### **Spatial subsetting**

Subset one object based on its relation in space to another object.

```{r}

# subset
grid_with_sites1 = grid_sf[sites,]

# plot
tm_shape(grid_with_sites1) +
  tm_borders()

```

the command x\[y,\] subsets features of target x using features of source y.

By default it is using *intersects* topological relation.

However, sf provides many more ways to establish relation between pairs of geometry sets.

They are called geometry binary predicates.

-   `st_intersects()`

-   `st_disjoint()`

-   `st_touches()`

-   `st_crosses()`

-   `st_within()`

-   `st_contains()`

-   `st_contains_properly()`

-   `st_overlaps()`

-   `st_equals()`

-   `st_covers()`

-   `st_covered_by()`

-   `st_equals_exact()`

-   `st_is_within_distance()`

Let's go back to our previous example. We will use a topological operator `st_interesects()` to return `sgbp` object (sparse geometry binary operator). Then we will create a logical vector (TRUE if features intersect and FALSE if they don't) to subset the grid.

( <https://r.geocompx.org/spatial-operations.html#spatial-subsetting>)

```{r}
# we will use topological operator 
sel_sgbp = st_intersects(x = grid_sf, y = sites)

# have a look at sparse geometry binary predicate 
sel_sgbp

# create a logical vector
sel_logical = lengths(sel_sgbp) > 0

# use logical vector to subset grids with sites
grid_with_sites2 = grid_sf[sel_logical,]

# plot
tm_shape(grid_with_sites2) +
  tm_borders()



```

Third method using `st_filter()`

```{r}
# subset
grid_with_sites3 = grid_sf %>% 
  st_filter(y = sites, .predicate = st_intersects)

# plot
tm_shape(grid_with_sites3) +
  tm_borders()

```

Point in Polygon

In the next task we want to count number of sites per grid.

Method 1 - using sparse geometry binary operator

```{r}

# we can assign this list of count of points back to our grid 
grid_sf$sites_count = lengths(st_intersects(grid_sf, sites))

# plot
tm_shape(grid_sf) +
  tm_polygons("sites_count")

# filter out grids without sites 
tm_shape(grid_sf[grid_sf$sites_count > 0,]) +
  tm_polygons("sites_count")



```

Method 2 - using spatial join we have more flexibility as we can use `split-combine-apply` to produce additional statistics such as sum of sites areas.

```{r}

# make a spatial join
grid_join = st_join(grid_sf, sites)

# summarize the join by grid id
grid_sum = grid_join %>%
  group_by(grid_id) %>%
  summarize(
    count = n(),
    total_area  = sum(size_ha)
  ) %>% 
  filter(!is.na(total_area)) # deal with NA values

# have a look
head(grid_sum)

```

Plot using tmap `view` mode.

```{r}
# interactive mode
tmap_mode(mode = c("view"))

# tmap converting sites
tm_shape(grid_sum) +
  tm_fill(col = "count",
          style = "jenks",
          convert2density = TRUE,
          title= "Sites per km2"
          ) + 
  tm_borders(alpha=.8, col = "white")

```

## Geometry operations

Let's start with clearing environment and reading only the sites again.

```{r}

# clear environment
rm(list = ls())

# load sites again
sites = st_read("../data/vect/data.gpkg", layer = "sites_point", quiet = TRUE)


```

Buffer

```{r}

# filter sites
sites_ltm = sites[sites$period == "Late Third Millennium",]

# apply buffer to selected sites
sites_buff_2km = st_buffer(sites_ltm, dist = 2000)

# quick map
plot(sites_buff_2km$geom)



```

Union

```{r}

# union
sites_buff_2km_union = st_union(sites_buff_2km)

# plot
plot(sites_buff_2km_union)

# create sf object
agri_area = st_sf(sites_buff_2km_union)

# name geom column
st_geometry(agri_area) = "geom"

# calcualte area - it returns m^2
agri_area$area = st_area(agri_area)

# we can convert it to km
agri_area$area = units::set_units(st_area(agri_area), km^2)


```

## Saving Data

Write the agricultural potential areas to geopackage.

```{r}

write_sf(agri_area, "../data/vect/data.gpkg", layer = "agri_area_ltm", 
         delete_layer = TRUE)

```

or shapefile

```{r eval=FALSE, include=FALSE}

write_sf(agri_area, "../data/vect/agri_area_ltm.shp")

```

## Voronoi Polygons

Voronoi or Thiessen polygons are popular theoretical boundary models.

The border is drawn where the distance between two points is equal.

Below are two methods to compute the polygons in R.

Please execute the below code. Try to do it line by line to inspect the code and result.

Use help to learn about each

```{r}

# DATA ----

rm(list = ls())

# sites
sites = st_read("../data/vect/data.gpkg", layer = "sites_point", quiet = TRUE)

# sites ltm
sites_ltm = sites[sites$period == "Late Third Millennium",]

# bbox of all sits
bbox = st_bbox(sites)

bbox_sfc = st_as_sfc(bbox)

# VORONOI ----

# method 1
voronoi <- sites_ltm %>%  # consider the master points
  st_geometry() %>% # ... as geometry only (= throw away the data items)
  st_union() %>% # unite them ...
  st_voronoi() %>% # ... and perform the voronoi tessellation
  st_collection_extract() %>% # select the polygons
  st_sf(crs = 32637) %>% # set metric crs
  st_join(sites) %>% # & re-connect the data items
  st_intersection(bbox_sfc) # limit to bounding box boundaries

# plot mode
tmap_mode("plot")
vor1 = tm_shape(voronoi) +
  tm_borders() +
  tm_shape(sites_ltm) +
  tm_symbols()

# METHOD 2
# install.packages("deldir")
# install.packages("dismo")

library(dismo)

voronoi_int = voronoi(st_coordinates(sites_ltm),ext = bbox)

voronoi_int = st_as_sf(voronoi_int) %>% st_set_crs(st_crs(sites_ltm))

voronoi_int = voronoi_int %>%  st_intersection(bbox_sfc)


# plot
vor2 = tm_shape(voronoi_int) +
  tm_borders() +
  tm_shape(sites_ltm) +
  tm_symbols()

# plot polygons obtained from two methods
tmap_arrange(vor1, vor2)

```

## Resources

[sf package website with articles 1-6](https://r-spatial.github.io/sf/articles/sf1.html)

[Our Coding Cub Tutorials - Geospatial vector data in R and sf](https://ourcodingclub.github.io/tutorials/spatial-vector-sf/)
