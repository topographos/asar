---
title: "Archaeological Spatial Analysis in R"
subtitle: "Lesson 2"
author:
  - name: Michal Michalski
    email: michal.m.michalski@durham.ac.uk
    affiliations: Durham University
format: 
  html:
    code-fold: false
    toc: true
    code-overflow: wrap
editor: visual
execute: 
  warning: false
theme: cosmo
---

## Learning Objectives

-   learn about simple feature package

-   deal with coordinate reference system

-   create vector data

-   manipulate vector data

## Introduction

## Background Reading

-   Lovelace R, Nowosad K, Muenchow J, *Geocomputation with R,* Chapter 2.3,3.3, 4.3 and 5.2 - [link](https://r.geocompx.org/)

## Packages

```{r}
# load packages
library(terra) # raster 
library(tmap) # mapping
```

## Raster Basic

Matrix

```{r}
# create matrix - two dimensional data structure
m = matrix(1:9, nrow = 3, ncol = 3)

# check for attributes
attributes(m)

# check for dimension
dim(m)
```

Raster from scratch

```{r}

# create spatial raster 
r <- rast(ncol=3, nrow=3, xmin=-150, xmax=-120, ymin=20, ymax=50, vals = 1:9)

# plot
plot(r)

```

Reading raster file

```{r}

dem = rast("../data/rast/dem.tif")

plot(dem)
```

Summarizing Raster

```{r}


class(dem) # class

summary(dem) #descriptive statistics

global(dem, fun = "mean") # custom e.g. mean, sd 

dim(dem) # dimensions

ncell(dem) # number of cells

nrow(dem) # number of rows

ncol(dem) # number of columns

ext(dem) # spatial extension

res(dem) # raster resolution

crs(dem) # raster coordinate system
```

histogram

```{r}

hist(dem) # histogram

```

Reprojecting

-   **crs()**

-   **project()**

```{r}

crs(dem, describe = TRUE)

dem_WGS84 = project(dem, "EPSG:4326" )
```

## Map Algebra

-   local

-   focal

-   zonal

-   global

### Local

```{r}


dem2 = dem * 100

dem3 = dem
dem3[dem3 < 400] <- NA

map1 = tm_shape(dem) +
    tm_raster()

map2 = tm_shape(dem2) +
    tm_raster(style = "cont")

map3 = tm_shape(dem3) +
    tm_raster(style = "cont", showNA=TRUE, colorNA="grey")


tmap_arrange(map1,map2,map3)
```

It is possible to change the values of raster by reclassifying them using classify() function.The first step is to create a plain matrix where the first and second columns list the starting and ending values of the range of input values that are to be reclassified, and where the third column lists the new raster cell values.

```{r}
m <- c(300, 350, 1,  350, 400, 2,  400, 500,  3)
m <- matrix(m, ncol=3, byrow = T)
m
```

`Paramerer right = TRUE`, the intervals are closed on the right (and open on the left), (300, 350\], closed means that second column of the matrix is inclusive.

```{r}

dem_reclass = classify(dem, m, right = TRUE )

tm_shape(dem_reclass) +
    tm_raster(style = "cat")

```

```{r}

levels(dem_reclass) = data.frame(value = c(1, 2, 3), landform = c("valley", "plain", "plateau"))

cats(dem_reclass)
?cats
levels(dem_reclass)[[1]]

```

### Focal

```{r}

f <- focal(dem, w=matrix(1,nrow=3,ncol=3), fun=mean)

tm_shape(f) +
  tm_raster()

```

### Zonal

```{r}

# categorical raster
geology = st_read("../data/vect/data.gpkg", layer = "geology")

# rasterize vector
geo_raster = rasterize(vect(geology), dem, "SEDIMENTS")

cats(geo_raster)

map1 = tm_shape(dem) +
  tm_raster()

map2 = tm_shape(geo_raster) +
  tm_raster()

tmap_arrange(map1, map2)



```

### Global

Distance

```{r}

rivers = st_read("../data/vect/data.gpkg", layer = "rimes_rivers", quiet = TRUE)

rivers_vect = vect(rivers)

dist = distance(dem,rivers_vect)

tm_shape(dist) +
  tm_raster(style = "cont") +
  tm_shape(rivers) +
  tm_lines(col = "#80c5de")
```

Terrain Characteristics

```{r}

```

## NDVI

```{r}

```
